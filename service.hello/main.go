package main

import (
	"context"
	"fmt"
	"log"
	"net"

	// generated by Bazel

	"github.com/spf13/viper"
	pb "github.com/vectorhacker/pds/service.hello/proto"
	"google.golang.org/grpc"
)

func init() {
	viper.SetDefault("host", "0.0.0.0")
	viper.SetDefault("port", 5000)
	viper.SetDefault("instance", 1)
	viper.AutomaticEnv()
}

type greetingServer struct {
}

func (*greetingServer) Greet(ctx context.Context, r *pb.Request) (*pb.Response, error) {
	return &pb.Response{
		Greeting: fmt.Sprintf("Hello %s from %d", r.Name, viper.GetInt("instance")),
	}, nil
}

func newServer() *greetingServer {
	s := &greetingServer{}
	return s
}

func main() {
	log.Println("service.hello starting...")
	lis, err := net.Listen("tcp", fmt.Sprintf("%s:%d", viper.GetString("host"), viper.GetInt("port")))
	if err != nil {
		log.Fatal(err)
	}

	grpcServer := grpc.NewServer()
	pb.RegisterHelloServer(grpcServer, newServer())
	grpcServer.Serve(lis)
}
